---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-config
  namespace: {{ .Release.Namespace }}
data:
  {{- $ekstep_authorization := .Values.ekstep_authorization }}

  {{- if empty $ekstep_authorization }}
    {{- $ekstep_authorization = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.kong.name "Key" .Values.external_secrets.kong.key) -}}
  {{- end -}}

{{/* Uncomment this after adding kong chart
  {{- if empty $ekstep_authorization }}
    {{- $ekstep_authorization = fromYaml (include (print .Subcharts.kong.Template.BasePath "/configmap.yaml") .Subcharts.kong) }}
    {{- $ekstep_authorization = get $ekstep_authorization.data .Values.external_secrets.kong.key }}
  {{- end }}
*/}}

  {{- if empty $ekstep_authorization }}
    {{- printf  "ERROR | %s | The ekstep_authorization value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  ekstep_authorization: {{ $ekstep_authorization }}

  {{- $sunbird_authorization := .Values.sunbird_authorization }}

  {{- if empty $sunbird_authorization }}
    {{- $sunbird_authorization = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.kong.name "Key" .Values.external_secrets.kong.key) -}}
  {{- end -}}

{{/* Uncomment this after adding kong chart
  {{- if empty $sunbird_authorization }}
    {{- $sunbird_authorization = fromYaml (include (print .Subcharts.kong.Template.BasePath "/configmap.yaml") .Subcharts.kong) }}
    {{- $sunbird_authorization = get $sunbird_authorization.data .Values.external_secrets.kong.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_authorization }}
    {{- printf  "ERROR | %s | The sunbird_authorization value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_authorization: {{ $sunbird_authorization  }}

  sunbird_sso_url: {{ if .Values.domain }}
  {{- printf "https://%s" .Values.domain }}{{ .Values.keycloak_auth_endpoint }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"domain\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_web_url: {{ if .Values.domain }}
  {{- .Values.domain }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"domain\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_account_name: {{ if .Values.cloud_public_storage_accountname }}
  {{- .Values.cloud_public_storage_accountname }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"cloud_public_storage_accountname\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_account_key: {{ if .Values.cloud_public_storage_secret }}
  {{- .Values.cloud_public_storage_secret }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"cloud_public_storage_secret\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_analytics_blob_account_name: {{ if .Values.cloud_private_storage_accountname }}
  {{- .Values.cloud_private_storage_accountname }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"cloud_private_storage_accountname\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_analytics_blob_account_key: {{ if .Values.cloud_private_storage_secret }}
  {{- .Values.cloud_private_storage_secret }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a value for \"cloud_private_storage_secret\"" .Chart.Name | fail }}
  {{- end }}

  sunbird_cloud_service_provider: {{ if eq (include "common.csp.validation" .Values.cloud_service_provider) "true" }}
  {{- .Values.cloud_service_provider }}
  {{- else -}}
  {{- printf "ERROR | %s | Please provide a valid value for \"cloud_service_provider\". Accepted values are \"%s\"" .Chart.Name (include "common.valid.csps" .) | fail }}
  {{- end }}

  {{- $sunbird_keycloak_user_federation_provider_id := .Values.sunbird_keycloak_user_federation_provider_id }}

  {{- if empty $sunbird_keycloak_user_federation_provider_id }}
    {{- $sunbird_keycloak_user_federation_provider_id = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.keycloak_federation.name "Key" .Values.external_secrets.keycloak_federation.key) -}}
  {{- end -}}

{{/* Uncomment this after adding keycloak chart
  {{- if empty $sunbird_keycloak_user_federation_provider_id }}
    {{- $sunbird_keycloak_user_federation_provider_id = fromYaml (include (print .Subcharts.keycloak.Template.BasePath "/configmap.yaml") .Subcharts.keycloak) }}
    {{- $sunbird_keycloak_user_federation_provider_id = get $sunbird_keycloak_user_federation_provider_id.data .Values.external_secrets.keycloak_federation.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_keycloak_user_federation_provider_id }}
    {{- printf  "ERROR | %s | The sunbird_keycloak_user_federation_provider_id value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_keycloak_user_federation_provider_id: {{ $sunbird_keycloak_user_federation_provider_id }}

  {{- $sunbird_pg_user := .Values.sunbird_pg_user }}

  {{- if empty $sunbird_pg_user }}
    {{- $sunbird_pg_user = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.postgresql_user.name "Key" .Values.external_secrets.postgresql_user.key) -}}
  {{- end -}}

{{/* Uncomment this after adding postgresql chart
  {{- if empty $sunbird_pg_user }}
    {{- $sunbird_pg_user = fromYaml (include (print .Subcharts.postgresql.Template.BasePath "/configmap.yaml") .Subcharts.postgresql) }}
    {{- $sunbird_pg_user = get $sunbird_pg_user.data .Values.external_secrets.postgresql_user.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_pg_user }}
    {{- printf  "ERROR | %s | The sunbird_pg_user value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_pg_user: {{ $sunbird_pg_user }}

  {{- $sunbird_pg_password := .Values.sunbird_pg_password }}

  {{- if empty $sunbird_pg_password }}
    {{- $sunbird_pg_password = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.postgresql_password.name "Key" .Values.external_secrets.postgresql_password.key) -}}
  {{- end -}}

{{/* Uncomment this after adding postgresql chart
  {{- if empty $sunbird_pg_password }}
    {{- $sunbird_pg_password = fromYaml (include (print .Subcharts.postgresql.Template.BasePath "/configmap.yaml") .Subcharts.postgresql) }}
    {{- $sunbird_pg_password = get $sunbird_pg_password.data .Values.external_secrets.postgresql_password.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_pg_password }}
    {{- printf  "ERROR | %s | The sunbird_pg_password value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_pg_password: {{ $sunbird_pg_password }}

  {{- $sunbird_sso_client_secret := .Values.sunbird_sso_client_secret }}

  {{- if empty $sunbird_sso_client_secret }}
    {{- $sunbird_sso_client_secret = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.keycloak_client_secret.name "Key" .Values.external_secrets.keycloak_client_secret.key) -}}
  {{- end -}}

{{/* Uncomment this after adding keycloak chart
  {{- if empty $sunbird_sso_client_secret }}
    {{- $sunbird_sso_client_secret = fromYaml (include (print .Subcharts.keycloak.Template.BasePath "/configmap.yaml") .Subcharts.keycloak) }}
    {{- $sunbird_sso_client_secret = get $sunbird_sso_client_secret.data .Values.external_secrets.keycloak_client_secret.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_sso_client_secret }}
    {{- printf  "ERROR | %s | The sunbird_sso_client_secret value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_sso_client_secret: {{ $sunbird_sso_client_secret }}

  {{- $sunbird_sso_publickey := .Values.sunbird_sso_publickey }}

  {{- if empty $sunbird_sso_publickey }}
    {{- $sunbird_sso_publickey = include "common.read.secret" (dict "ChartName" .Chart.Name "Namespace" .Release.Namespace "Name" .Values.external_secrets.keycloak_realm_public_key.name "Key" .Values.external_secrets.keycloak_realm_public_key.key) -}}
  {{- end -}}

{{/* Uncomment this after adding keycloak chart
  {{- if empty $sunbird_sso_publickey }}
    {{- $sunbird_sso_publickey = fromYaml (include (print .Subcharts.keycloak.Template.BasePath "/configmap.yaml") .Subcharts.keycloak) }}
    {{- $sunbird_sso_publickey = get $sunbird_sso_publickey.data .Values.external_secrets.keycloak_realm_public_key.key }}
  {{- end }}
*/}}

  {{- if empty $sunbird_sso_publickey }}
    {{- printf  "ERROR | %s | The sunbird_sso_publickey value could not be found in values.yaml or in secrets or in subcharts" .Chart.Name | fail }}
  {{- end }}

  sunbird_sso_publickey: {{ $sunbird_sso_publickey }}

  sunbird_subdomain_keycloak_base_url: {{ if .Values.domain }}
  {{- .Values.merge_domain }}{{ .Values.keycloak_auth_endpoint }}
  {{- end }}
  google_captcha_mobile_private_key: {{ .Values.google_captcha_mobile_private_key | quote }}
  google_captcha_private_key: {{ .Values.google_captcha_private_key | quote }}
  sunbird_mail_server_from_email: {{ .Values.sunbird_mail_server_from_email | quote }}
  sunbird_mail_server_host: {{ .Values.sunbird_mail_server_host | quote }}
  sunbird_mail_server_password: {{ .Values.sunbird_mail_server_password | quote }}
  sunbird_mail_server_port: {{ .Values.sunbird_mail_server_port | quote }}
  sunbird_mail_server_username: {{ .Values.sunbird_mail_server_username | quote }}
  sunbird_msg_91_auth: {{ .Values.sunbird_msg_91_auth | quote }}
  sunbird_msg_sender: {{ .Values.sunbird_msg_sender | quote }}
  sunbird_url_shortner_access_token: {{ .Values.sunbird_url_shortner_access_token | quote }}
  ENV_NAME: {{ .Values.ENV_NAME }}
  PORTAL_SERVICE_PORT: {{ .Values.PORTAL_SERVICE_PORT }}
  SUNBIRD_KAFKA_URL: {{ .Values.SUNBIRD_KAFKA_URL }}
  accesstoken.publickey.basepath: {{ .Values.accesstoken.publickey.basepath }}
  actor_hostname: {{ .Values.actor_hostname }}
  api_actor_provider: {{ .Values.api_actor_provider }}
  background_actor_provider: {{ .Values.background_actor_provider }}
  bind_hostname: {{ .Values.bind_hostname }}
  ekstep_api_base_url: {{ .Values.ekstep_api_base_url }}
  feed_limit: {{ .Values.feed_limit | quote }}
  form_api_endpoint: {{ .Values.form_api_endpoint }}
  isMultiDCEnabled: {{ .Values.isMultiDCEnabled | quote }}
  kafka_urls: {{ .Values.kafka_urls }}
  learner_in_memory_cache_ttl: {{ .Values.learner_in_memory_cache_ttl | quote }}
  notification_service_base_url: {{ .Values.notification_service_base_url }}
  org_index_alias: {{ .Values.org_index_alias }}
  quartz_shadow_user_migration_timer: {{ .Values.quartz_shadow_user_migration_timer }}
  sunbird_analytics_api_base_url: {{ .Values.sunbird_analytics_api_base_url }}
  sunbird_api_base_url: {{ .Values.sunbird_api_base_url }}
  sunbird_api_mgr_base_url: {{ .Values.sunbird_api_mgr_base_url }}
  sunbird_app_name: {{ .Values.sunbird_app_name }}
  sunbird_cache_enable: {{ .Values.sunbird_cache_enable | quote }}
  sunbird_cassandra_consistency_level: {{ .Values.sunbird_cassandra_consistency_level }}
  sunbird_cassandra_host: {{ .Values.sunbird_cassandra_host }}
  sunbird_cassandra_password: {{ .Values.sunbird_cassandra_password }}
  sunbird_cassandra_port: {{ .Values.sunbird_cassandra_port | quote }}
  sunbird_cassandra_username: {{ .Values.sunbird_cassandra_username }}
  sunbird_cert_service_base_url: {{ .Values.sunbird_cert_service_base_url }}
  sunbird_content_azure_storage_container: {{ .Values.sunbird_content_azure_storage_container }}
  sunbird_course_batch_notification_enabled: {{ .Values.sunbird_course_batch_notification_enabled | quote }}
  sunbird_course_batch_notification_signature: {{ .Values.sunbird_course_batch_notification_signature }}
  sunbird_cs_base_url: {{ .Values.sunbird_cs_base_url }}
  sunbird_cs_search_path: {{ .Values.sunbird_cs_search_path }}
  sunbird_default_channel: {{ .Values.sunbird_default_channel }}
  sunbird_email_max_recipients_limit: {{ .Values.sunbird_email_max_recipients_limit | quote }}
  sunbird_encryption_key: {{ .Values.sunbird_encryption_key }}
  sunbird_encryption_mode: {{ .Values.sunbird_encryption_mode }}
  sunbird_env_logo_url: {{ .Values.sunbird_env_logo_url | quote }}
  sunbird_environment: {{ .Values.sunbird_environment }}
  sunbird_es_host: {{ .Values.sunbird_es_host }}
  sunbird_es_port: {{ .Values.sunbird_es_port | quote }}
  sunbird_fuzzy_search_threshold: {{ .Values.sunbird_fuzzy_search_threshold |quote }}
  sunbird_gzip_enable: {{ .Values.sunbird_gzip_enable | quote }}
  sunbird_gzip_size_threshold: {{ .Values.sunbird_gzip_size_threshold | quote }}
  sunbird_health_check_enable: {{ .Values.sunbird_health_check_enable | quote }}
  sunbird_installation: {{ .Values.sunbird_installation }}
  sunbird_installation_display_name: {{ .Values.sunbird_installation_display_name }}
  sunbird_installation_display_name_for_sms: {{ .Values.sunbird_installation_display_name_for_sms }}
  sunbird_installation_email: {{ .Values.sunbird_installation_email }}
  sunbird_instance: {{ .Values.sunbird_instance }}
  sunbird_keycloak_required_action_link_expiration_seconds: {{ .Values.sunbird_keycloak_required_action_link_expiration_seconds | quote }}
  sunbird_mw_system_host: {{ .Values.sunbird_mw_system_host }}
  sunbird_mw_system_port: {{ .Values.sunbird_mw_system_port | quote }}
  sunbird_open_saber_bridge_enable: {{ .Values.sunbird_open_saber_bridge_enable | quote }}
  sunbird_otp_allowed_attempt: {{ .Values.sunbird_otp_allowed_attempt | quote }}
  sunbird_otp_expiration: {{ .Values.sunbird_otp_expiration | quote }}
  sunbird_otp_length: {{ .Values.sunbird_otp_length | quote }}
  sunbird_pg_db: {{ .Values.sunbird_pg_db }}
  sunbird_pg_host: {{ .Values.sunbird_pg_host }}
  sunbird_pg_port: {{ .Values.sunbird_pg_port | quote }}
  sunbird_quartz_mode: {{ .Values.sunbird_quartz_mode }}
  sunbird_redis_host: {{ .Values.sunbird_redis_host }}
  sunbird_redis_port: {{ .Values.sunbird_redis_port | quote }}
  sunbird_registry_service_baseurl: {{ .Values.sunbird_registry_service_baseurl }}
  sunbird_remote_bg_req_router_path: {{ .Values.sunbird_remote_bg_req_router_path }}
  sunbird_remote_req_router_path: {{ .Values.sunbird_remote_req_router_path }}
  sunbird_reset_pass_msg: {{ .Values.sunbird_reset_pass_msg | quote }}
  sunbird_search_service_api_base_url: {{ .Values.sunbird_search_service_api_base_url }}
  sunbird_sso_client_id: {{ .Values.external_secrets.keycloak_client_secret.key }}
  sunbird_sso_lb_ip: {{ .Values.sunbird_sso_lb_ip }}
  sunbird_sso_realm: {{ .Values.external_secrets.keycloak_realm_public_key.key }}
  sunbird_sso_username: {{ .Values.sunbird_sso_username | quote  }}
  sunbird_sso_password: {{ .Values.sunbird_sso_password | quote }}
  sunbird_telemetry_base_url: {{ .Values.sunbird_telemetry_base_url }}
  sunbird_time_zone: {{ .Values.sunbird_time_zone }}
  sunbird_url_shortner_enable: {{ .Values.sunbird_url_shortner_enable | quote }}
  sunbird_user_bulk_upload_size: {{ .Values.sunbird_user_bulk_upload_size | quote }}
  sunbird_user_cert_kafka_topic: {{ .Values.sunbird_user_cert_kafka_topic }}
  sunbird_user_profile_field_default_visibility: {{ .Values.sunbird_user_profile_field_default_visibility }}
  telemetry_pdata_id: {{ .Values.telemetry_pdata_id }}
  telemetry_pdata_pid: {{ .Values.telemetry_pdata_pid }}
  telemetry_queue_threshold_value: {{ .Values.telemetry_queue_threshold_value | quote }}
  user_index_alias: {{ .Values.user_index_alias }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}-logback-config
  namespace: {{ .Release.Namespace }}
data:
  logback.xml: |-
    <configuration>

      <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />

      <!-- transaction-event-trigger START -->
      <timestamp key="timestamp" datePattern="yyyy-MM-dd"/>
      <!-- common transactions logs -->
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
          <layout class="net.logstash.logback.layout.LogstashLayout">
            <fieldNames>
              <timestamp>timestamp</timestamp>
              <message>msg</message>
              <logger>lname</logger>
              <thread>tname</thread>
              <levelValue>[ignore]</levelValue>
              <version>[ignore]</version>
              <stack_trace>exception</stack_trace>
            </fieldNames>
            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
              <maxDepthPerThrowable>30</maxDepthPerThrowable>
              <maxLength>2048</maxLength>
              <exclude>sun\.reflect\..*\.invoke.*</exclude>
              <rootCauseFirst>true</rootCauseFirst>
              <inlineHash>true</inlineHash>
            </throwableConverter>
          </layout>
        </encoder>
      </appender>

      <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="STDOUT" />
      </appender>

      <appender name="queryLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
          <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
            <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSX</timestampFormat>
            <timestampFormatTimezoneId>Etc/UTC</timestampFormatTimezoneId>
            <fieldNames>
              <timestamp>timestamp</timestamp>
              <message>msg</message>
              <logger>lname</logger>
              <thread>tname</thread>
              <levelValue>[ignore]</levelValue>
              <version>[ignore]</version>
            </fieldNames>
          </layout>
        </encoder>
      </appender>

      <appender name="defaultLoggerAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
          <layout class="net.logstash.logback.layout.LogstashLayout">
            <fieldNames>
              <timestamp>timestamp</timestamp>
              <message>msg</message>
              <logger>lname</logger>
              <thread>tname</thread>
              <levelValue>[ignore]</levelValue>
              <version>[ignore]</version>
              <stack_trace>exception</stack_trace>
            </fieldNames>
            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
              <maxDepthPerThrowable>30</maxDepthPerThrowable>
              <maxLength>2048</maxLength>
              <exclude>sun\.reflect\..*\.invoke.*</exclude>
              <rootCauseFirst>true</rootCauseFirst>
              <inlineHash>true</inlineHash>
            </throwableConverter>
          </layout>
        </encoder>
      </appender>

      <appender name="kafka-appender" class="com.github.danielwegener.logback.kafka.KafkaAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
          <pattern>%msg</pattern>
        </encoder>

        <topic>${ENV_NAME}.telemetry.raw</topic>
        <!-- ensure that every message sent by the executing host is partitioned to the same partition strategy -->
        <keyingStrategy class="com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy" />
        <!-- block the logging application thread if the kafka appender cannot keep up with sending the log messages -->
        <deliveryStrategy class="com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy" />

        <!-- each <producerConfig> translates to regular kafka-client config (format: key=value) -->
        <!-- producer configs are documented here: https://kafka.apache.org/documentation.html#newproducerconfigs -->
        <!-- bootstrap.servers is the only mandatory producerConfig -->
        <producerConfig>bootstrap.servers=${SUNBIRD_KAFKA_URL}</producerConfig>
        <!-- don't wait for a broker to ack the reception of a batch.  -->
        <producerConfig>acks=0</producerConfig>
        <!-- wait up to 1000ms and collect log messages before sending them as a batch -->
        <producerConfig>linger.ms=15000</producerConfig>
        <!-- even if the producer buffer runs full, do not block the application but start to drop messages -->
        <producerConfig>max.block.ms=0</producerConfig>
        <!-- define a client-id that you use to identify yourself against the kafka broker -->
        <producerConfig>client.id=${HOSTNAME}-${CONTEXT_NAME}-logback-relaxed</producerConfig>

        <!-- there is no fallback <appender-ref>. If this appender cannot deliver, it will drop its messages. -->

      </appender>

      <logger name="defaultLoggerAppender" level="INFO" />
      <!-- Telemetry Loggers-->
      <logger name="TelemetryEventLogger" level="INFO">
        <appender-ref ref="kafka-appender" />
      </logger>

      <logger name="queryLogger" level="DEBUG">
        <appender-ref ref="defaultLoggerAppender" />
      </logger>

      <root level="INFO">
        <appender-ref ref="ASYNCSTDOUT" />
      </root>

    </configuration>
